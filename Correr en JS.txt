Instala las dependencias:

Abre una terminal en la carpeta de tu proyecto y ejecuta npm install para instalar todas las dependencias listadas en tu package.json.

Corre el servidor de desarrollo:

Ejecuta npm run dev en la terminal para iniciar el servidor de desarrollo de Vite. Esto deber√≠a abrir tu proyecto en el navegador autom√°ticamente.

Construye el proyecto:

Si quieres crear una versi√≥n optimizada para producci√≥n, ejecuta npm run build. Esto generar√° una carpeta dist con los archivos listos para ser desplegados.

Previsualiza la construcci√≥n:

Para previsualizar la versi√≥n construida, ejecuta npm run preview.

Linting:

Puedes ejecutar npm run lint para revisar tu c√≥digo con ESLint y asegurarte de que sigue las convenciones de estilo y no tiene errores.

-------------------------------------------
  // async function generateFrontendCode() {
  //   // 1. Generar HTML (ejemplo b√°sico)
  //   let htmlCode = `
  // <!DOCTYPE html>
  // <html lang="es">
  // <head>
  //   <meta charset="UTF-8">
  //   <meta name="viewport" content="width=device-width, initial-scale=1.0">
  //   <title>Aplicaci√≥n generada desde UML</title>
  //   <link rel="stylesheet" href="styles.css">
  // </head>
  // <body>
  //   <div class="app">
  //     <h1>Clases del sistema:</h1>
  //     <div class="classes-container">
  //   `;

  //   // A√±adir cada clase como una tarjeta en HTML
  //   nodes.forEach((node) => {
  //     htmlCode += `
  //       <div class="class-card">
  //         <h2>${node.data.className}</h2>
  //         <div class="attributes">
  //           <h3>Atributos:</h3>
  //           <ul>
  //             ${node.data.attributes.map((attr) => `<li>${attr}</li>`).join("")}
  //           </ul>
  //         </div>
  //         <div class="methods">
  //           <h3>M√©todos:</h3>
  //           <ul>
  //             ${node.data.methods.map((method) => `<li>${method}</li>`).join("")}
  //           </ul>
  //         </div>
  //       </div>
  //     `;
  //   });

  //   htmlCode += `
  //     </div>
  //   </div>
  //   <script src="script.js"></script>
  // </body>
  // </html>
  //   `;

  //   // 2. Generar CSS b√°sico
  //   const cssCode = `
  // .class-card {
  //   border: 1px solid #ccc;
  //   border-radius: 8px;
  //   padding: 16px;
  //   margin: 10px;
  //   width: 250px;
  //   background: #f9f9f9;
  // }
  // .classes-container {
  //   display: flex;
  //   flex-wrap: wrap;
  // }
  // .attributes, .methods {
  //   margin-top: 10px;
  // }
  // ul {
  //   padding-left: 20px;
  // }
  //   `;

  //   // 3. Generar JavaScript (opcional: interactividad)
  //   const jsCode = `
  // // Aqu√≠ puedes a√±adir l√≥gica JS basada en las relaciones del UML
  // console.log("Aplicaci√≥n generada desde UML");
  //   `;

  //   // Crear un ZIP con los 3 archivos (opcional)
  //   const zip = new JSZip();
  //   zip.file("index.html", htmlCode);
  //   zip.file("styles.css", cssCode);
  //   zip.file("script.js", jsCode);

  //   const content = await zip.generateAsync({ type: "blob" });
  //   const url = URL.createObjectURL(content);

  //   // Descargar el ZIP
  //   const a = document.createElement("a");
  //   a.href = url;
  //   a.download = "frontend-uml.zip";
  //   a.click();
  // }

  // async function generateFrontendCode() {
  //   // 1. Generar HTML (tabla interactiva)
  //   let htmlCode = `
  // <!DOCTYPE html>
  // <html lang="es">
  // <head>
  //   <meta charset="UTF-8">
  //   <meta name="viewport" content="width=device-width, initial-scale=1.0">
  //   <title>CRUD Generado desde UML</title>
  //   <link rel="stylesheet" href="styles.css">
  // </head>
  // <body>
  //   <div class="app">
  //     <h1>Clases del Sistema</h1>
  //     <button id="addClass" class="btn-add">+ A√±adir Clase</button>
  //     <table>
  //       <thead>
  //         <tr>
  //           <th>Clase</th>
  //           <th>Atributos</th>
  //           <th>M√©todos</th>
  //           <th>Acciones</th>
  //         </tr>
  //       </thead>
  //       <tbody>
  //   `;

  //   // A√±adir cada clase como una fila en la tabla
  //   nodes.forEach((node) => {
  //     htmlCode += `
  //         <tr>
  //           <td><strong>${node.data.className}</strong></td>
  //           <td><ul>${node.data.attributes.map((attr) => `<li>${attr}</li>`).join("")}</ul></td>
  //           <td><ul>${node.data.methods.map((method) => `<li>${method}</li>`).join("")}</ul></td>
  //           <td class="actions">
  //             <button class="btn-edit" onclick="editClass('${node.data.className}')">‚úèÔ∏è Editar</button>
  //             <button class="btn-delete" onclick="deleteClass('${node.data.className}')">üóëÔ∏è Eliminar</button>
  //           </td>
  //         </tr>
  //     `;
  //   });

  //   htmlCode += `
  //       </tbody>
  //     </table>
  //     <script src="script.js"></script>
  //   </div>
  // </body>
  // </html>
  //   `;

  //   // 2. Generar CSS moderno
  //   const cssCode = `
  // body {
  //   font-family: Arial, sans-serif;
  //   margin: 20px;
  //   background: #f5f5f5;
  // }
  // .app {
  //   max-width: 1000px;
  //   margin: 0 auto;
  //   background: white;
  //   padding: 20px;
  //   border-radius: 10px;
  //   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  // }
  // h1 {
  //   color: #333;
  // }
  // table {
  //   width: 100%;
  //   border-collapse: collapse;
  //   margin-top: 20px;
  // }
  // th, td {
  //   padding: 12px;
  //   text-align: left;
  //   border-bottom: 1px solid #ddd;
  // }
  // th {
  //   background: #f2f2f2;
  // }
  // ul {
  //   padding-left: 20px;
  //   margin: 0;
  // }
  // .actions {
  //   display: flex;
  //   gap: 10px;
  // }
  // .btn-add, .btn-edit, .btn-delete {
  //   padding: 8px 12px;
  //   border: none;
  //   border-radius: 4px;
  //   cursor: pointer;
  //   font-weight: bold;
  // }
  // .btn-add {
  //   background: #4CAF50;
  //   color: white;
  // }
  // .btn-edit {
  //   background: #2196F3;
  //   color: white;
  // }
  // .btn-delete {
  //   background: #f44336;
  //   color: white;
  // }
  // .btn-add:hover, .btn-edit:hover, .btn-delete:hover {
  //   opacity: 0.8;
  // }
  //   `;

  //   // 3. Generar JavaScript para CRUD simulado
  //   const jsCode = `
  // // Funciones simuladas para el CRUD
  // function editClass(className) {
  //   alert("Editando: " + className);
  //   // Aqu√≠ ir√≠a la l√≥gica real para editar
  // }

  // function deleteClass(className) {
  //   if (confirm("¬øEliminar la clase " + className + "?")) {
  //     alert("Clase eliminada (simulado)");
  //     // Aqu√≠ ir√≠a la l√≥gica real para eliminar
  //   }
  // }

  // document.getElementById("addClass").addEventListener("click", () => {
  //   const newClass = prompt("Nombre de la nueva clase:");
  //   if (newClass) {
  //     alert("Clase " + newClass + " creada (simulado)");
  //     // Aqu√≠ ir√≠a la l√≥gica real para a√±adir
  //   }
  // });
  //   `;

  //   // Crear ZIP con los 3 archivos
  //   const zip = new JSZip();
  //   zip.file("index.html", htmlCode);
  //   zip.file("styles.css", cssCode);
  //   zip.file("script.js", jsCode);

  //   const content = await zip.generateAsync({ type: "blob" });
  //   const url = URL.createObjectURL(content);

  //   // Descargar el ZIP
  //   const a = document.createElement("a");
  //   a.href = url;
  //   a.download = "frontend-crud-uml.zip";
  //   a.click();
  // }

